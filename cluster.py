# -*- coding: utf-8 -*-
"""cluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eNDo9QHw6OXIFeqyMJZaHMbdd81bMgzv
"""

import pandas as pd
import seaborn as sns
import warnings
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

sns.set(style="white", color_codes=True)

warnings.filterwarnings("ignore")

dataset = pd.read_csv('drive/My Drive/Colab Notebooks/CC.csv')
dataset.isna().sum()
dataset.fillna(dataset.mean(),inplace=True)
dataset.isna().sum()

X = dataset.iloc[:,1:]

from sklearn.cluster import KMeans
wcss=[]
for i in range(1,11):
    kmeans= KMeans(n_clusters=i,init='k-means++',max_iter=300,n_init=10,random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1,11),wcss)
plt.title('the elbow method')
plt.xlabel('Number of Clusters')
plt.ylabel('Wcss')
plt.grid(b=True, which='major', color='RED', linestyle='-')
plt.show()

##building the model
from sklearn.cluster import KMeans
nclusters = 3 # this is the k in kmeans
km = KMeans(n_clusters=nclusters)
km.fit(X)


# predict the cluster for each data point
y_cluster_kmeans = km.predict(X)
from sklearn import metrics
score = metrics.silhouette_score(X, y_cluster_kmeans)
print(score)

from google.colab import drive
drive.mount('/content/drive/')

scaler =preprocessing.StandardScaler() 
scaler.fit(X)
X_scaled_array=scaler.transform(X)
X_scaled=pd.DataFrame(X_scaled_array, columns =X.columns)

nclusters=3# this is the k in kmeans
seed =0
km =KMeans(n_clusters=nclusters, random_state=seed)
km.fit(X_scaled) # predict the cluster for each data point
y_cluster_kmeans=km.predict(X_scaled)
score = metrics.silhouette_score(X_scaled, y_cluster_kmeans)
print(score)

pca= PCA(2)
X_pca= pca.fit_transform(X_scaled)

nclusters=3# this is the k in kmeans
seed =0
km =KMeans(n_clusters=nclusters, random_state=seed)
km.fit(X_pca) # predict the cluster for each data point
y_cluster_kmeans=km.predict(X_pca)
score = metrics.silhouette_score(X_pca, y_cluster_kmeans)
print(score)